import math

def print_board(board):
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

def winner(board, player):
    win_states = [
        [0,1,2],[3,4,5],[6,7,8], # rows
        [0,3,6],[1,4,7],[2,5,8], # columns
        [0,4,8],[2,4,6]          # diagonals
    ]
    return any(all(board[i] == player for i in state) for state in win_states)

def is_full(board):
    return all(cell != ' ' for cell in board)

def minimax(board, depth, is_maximizing, alpha, beta):
    if winner(board, 'O'):
        return 1
    if winner(board, 'X'):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                eval = minimax(board, depth+1, False, alpha, beta)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                eval = minimax(board, depth+1, True, alpha, beta)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            move_val = minimax(board, 0, False, -math.inf, math.inf)
            board[i] = ' '
            if move_val > best_val:
                best_val = move_val
                move = i
    return move

def play():
    board = [' '] * 9
    print("Welcome to Tic-Tac-Toe! You are X, AI is O.")
    while True:
        print_board(board)
        # Human move
        move = int(input("Enter your move (0-8): "))
        if board[move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[move] = 'X'
        if winner(board, 'X'):
            print_board(board)
            print("Congratulations! You win!")
            break
        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break
        # AI move
        ai_move = best_move(board)
        board[ai_move] = 'O'
        print(f"AI chooses position {ai_move}")
        if winner(board, 'O'):
            print_board(board)
            print("AI wins! Better luck next time.")
            break
        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break

if _name_ == "_main_":
    play()
